@using MJ.Models.WrathAndGlory;
@{
    MotCleService _motcleService = new MotCleService();
    TalentService _talentService = new TalentService();
    TraitArmeService _traitArmeService = new TraitArmeService();
    List<MotCle> ListeMotCle = _motcleService.GetListMotCle();
    List<Talent> ListeTalent = _talentService.GetListTalent();
    List<TraitArme> ListeTraitArme = _traitArmeService.ListTraitsArmes();
    int maxLength = new[] { ListeMotCle.Count, ListeTalent.Count, ListeTraitArme.Count }.Max();
}

<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', () => {
        const tabList = document.querySelector('.tabs-nav');
        const tabs = tabList.querySelectorAll('.tab-button');
        const panels = document.querySelectorAll('.tab-panel');
        const indicator = document.querySelector('.tabs-indicator');

        const setIndicatorPosition = (tab) => {
            indicator.style.transform = `translateX(${tab.offsetLeft}px)`;
            indicator.style.width = `${tab.offsetWidth}px`;
        };

        // Set initial indicator position
        setIndicatorPosition(tabs[0]);

        tabs.forEach((tab) => {
            tab.addEventListener('click', (e) => {
                const targetTab = e.target;
                const targetPanel = document.querySelector(
                    `#${targetTab.getAttribute('aria-controls')}`
                );

                // Update tabs
                tabs.forEach((tab) => {
                    tab.setAttribute('aria-selected', false);
                    tab.classList.remove('active');
                });
                targetTab.setAttribute('aria-selected', true);
                targetTab.classList.add('active');

                // Update panels
                panels.forEach((panel) => {
                    panel.setAttribute('aria-hidden', true);
                });
                targetPanel.setAttribute('aria-hidden', false);

                // Move indicator
                setIndicatorPosition(targetTab);
            });
        });

        // Keyboard navigation
        tabList.addEventListener('keydown', (e) => {
            const targetTab = e.target;
            const previousTab = targetTab.previousElementSibling;
            const nextTab = targetTab.nextElementSibling;

            if (e.key === 'ArrowLeft' && previousTab) {
                previousTab.click();
                previousTab.focus();
            }
            if (e.key === 'ArrowRight' && nextTab) {
                nextTab.click();
                nextTab.focus();
            }
        });
    });

    function RechercheMotCle() {
        var value = $("#InputMotCle").val().toLowerCase();
        const keywordDivs = document.querySelectorAll('.divtabs');

        keywordDivs.forEach(div => {
            const keyword = div.getAttribute('name');
            if (value == "" || value == null) {
                div.style.display = "block";
            }
            else if (keyword.includes(value)) {
                div.style.display = "block";
            }
            else {
                div.style.display = 'none';
            }
        });
    }

    function RechercheTalent() {
        var value = $("#InputTalent").val().toLowerCase();
        const keywordDivs = document.querySelectorAll('.divtabs');

        keywordDivs.forEach(div => {
            const keyword = div.getAttribute('name');
            if (value == "" || value == null) {
                div.style.display = "block";
            }
            else if (keyword.includes(value)) {
                div.style.display = "block";
            }
            else {
                div.style.display = 'none';
            }
        });
    }

    function RechercheTraitArme() {
        var value = $("#InputTraitArme").val().toLowerCase();
        const keywordDivs = document.querySelectorAll('.divtabs');

        keywordDivs.forEach(div => {
            const keyword = div.getAttribute('name');
            if (value == "" || value == null) {
                div.style.display = "block";
            }
            else if (keyword.includes(value)) {
                div.style.display = "block";
            }
            else {
                div.style.display = 'none';
            }
        });
    }

</script>

<div class="tabs">
    <div class="tabs-nav" role="tablist" aria-label="Content sections">
        <div class="tabs-indicator"></div>
        <button class="tab-button" role="tab" aria-selected="true" aria-controls="panel-1" id="tab-1">
            Mots-Clés
        </button>
        <button class="tab-button" role="tab" aria-selected="false" aria-controls="panel-2" id="tab-2">
            Talents
        </button>
        <button class="tab-button" role="tab" aria-selected="false" aria-controls="panel-3" id="tab-3">
            Traits d'Armes
        </button>
    </div>

    <div class="tab-panel" role="tabpanel" id="panel-1" aria-labelledby="tab-1" aria-hidden="false">
        <h2>MOTS-CLÉS</h2>

        <input type="text" class="input-text-tabs" id="InputMotCle" placeholder="Entrer le nom d'un Mot-Clé" oninput="RechercheMotCle()"/>

        @foreach (MotCle MC in ListeMotCle)
        {
            <div class="divtabs" name="@MC.Nom.ToLower()">
                <label style="color: #b32020;">@MC.Nom</label>
                <p>@MC.Description</p>
            </div>
        }
    </div>

    <div class="tab-panel" role="tabpanel" id="panel-2" aria-labelledby="tab-2" aria-hidden="true">
        <h2>TALENTS</h2>

        <input type="text" class="input-text-tabs" id="InputTalent" placeholder="Entrer le nom d'un Talent" oninput="RechercheTalent()"/>

        @foreach (Talent T in ListeTalent)
        {
            <div class="divtabs" name="@T.Nom">
                <h4>@T.Nom</h4>
                <label>Coût en PX: @T.Cout</label><br />
                @if (T.Prerequis != "") {<label>Prérequis: @T.Prerequis</label>}
                <p>Éffet: @T.Effet</p>
            </div>
        }
    </div>

    <div class="tab-panel" role="tabpanel" id="panel-3" aria-labelledby="tab-3" aria-hidden="true">
        <h2>TRAITS D'ARMES</h2>

        <input type="text" class="input-text-tabs" id="InputTraitArme" placeholder="Entrer le nom d'un Trait d'Arme" oninput="RechercheTraitArme()" />

        @foreach (TraitArme TA in ListeTraitArme)
        {
            <div class="divtabs" name="@TA.Nom">
                <label>@TA.Nom @if (TA.Score != null && TA.Score != 0) { <text>(@TA.Score)</text> }</label><br />
                @if(TA.Condition != "" && TA.Condition != null) { <label>Condition: @TA.Condition</label> }
                <p>@TA.Description</p>
            </div>
        }
    </div>
</div>


<style>
    tbody, td, tfoot, th, thead, tr {
        border: 1px solid white;
    }

    td {
        width: 33%;
        word-wrap: break-word;
    }


    @{ #region TABS}

    .divtabs {
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 15px;
        padding: 10px;
        padding-left: 15px;
        margin-top: 25px;
        margin-bottom: 25px;
    }

    .input-text-tabs {
        width: 100%;
        background-color: black;
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        padding:5px;
        color: white;
    }

    /* Variables */
    :root {
        /* Colors */
        --primary-color: #646cff;
        --highlight-color: rgba(255, 255, 255, 0.08);
        --background-color: #000;
        --text-color: rgba(255, 255, 255, 0.87);
        --border-color: rgba(255, 255, 255, 0.05);
        /* Transitions */
        --transition-duration: 0.4s;
        --transition-timing: cubic-bezier(0.4, 0, 0.2, 1);
        /* Tabs specific */
        --tabs-gap: 0.5rem;
        --tab-padding: 0.75rem 1.25rem;
        --tab-border-radius: 8px;
        --tab-font-size: 1rem;
        --tab-font-weight: 500;
        --tabs-nav-padding: 0.375rem;
    }

    /* Reset */
    *, *::before, *::after {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }
    .tabs {
        width: 100%;
        max-width: 1250px;
        margin: 2rem;
        margin-left: auto;
        margin-right: auto
    }

    /* Tabs Navigation */
    .tabs-nav {
        position: relative;
        display: flex;
        gap: var(--tabs-gap);
        background: var(--highlight-color);
        padding: var(--tabs-nav-padding);
        border-radius: var(--tab-border-radius);
        margin-bottom: 2rem;
        isolation: isolate; /* Create new stacking context */
    }

    /* Tab Buttons */
    .tab-button {
        flex: 1;
        all: unset;
        position: relative;
        padding: var(--tab-padding);
        font-size: var(--tab-font-size);
        font-weight: var(--tab-font-weight);
        color: var(--text-color);
        border-radius: var(--tab-border-radius);
        cursor: pointer;
        transition: color var(--transition-duration) var(--transition-timing);
        text-align: center;
        white-space: nowrap;
        z-index: 1;
    }

        .tab-button:hover {
            color: var(--primary-color);
        }

        .tab-button[aria-selected="true"] {
            color: var(--primary-color);
        }

    /* Moving Indicator */
    .tabs-indicator {
        position: absolute;
        top: var(--tabs-nav-padding);
        bottom: var(--tabs-nav-padding);
        left: 0;
        border-radius: calc(var(--tab-border-radius) - 2px);
        background: var(--highlight-color);
        transition: transform var(--transition-duration) var(--transition-timing), width var(--transition-duration) var(--transition-timing);
        pointer-events: none;
        z-index: 0;
        box-shadow: 0 0 0 1px var(--border-color), 0 4px 12px rgba(0, 0, 0, 0.1);
        will-change: transform, width;
    }

    /* Tab Panels */
    .tab-panel {
        padding: 2rem;
        background: transparent;
        border-radius: var(--tab-border-radius);
        display: none;
        transform-origin: top;
        animation: slideIn var(--transition-duration) var(--transition-timing);
        box-shadow: 0 0 0 1px var(--border-color), 0 4px 12px rgba(0, 0, 0, 0.1);
    }

        .tab-panel[aria-hidden="false"] {
            display: block;
        }

    /* Animations */
    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(-8px) scale(0.98);
        }

        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }

    /* Focus styles */
    .tab-button:focus-visible {
        outline: 2px solid var(--primary-color);
        outline-offset: 2px;
    }

    /* Content styling */
    .tab-panel h2 {
        margin-bottom: 1rem;
        font-size: 1.5rem;
        color: var(--primary-color);
    }

    .tab-panel p {
        line-height: 1.6;
        opacity: 0.9;
    }

    @{ #endregion  }
</style>